---
- name: Create Namespace
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
        
- name: Create Persistent Volume Claims
  failed_when: false # ignore failure if PVC already exists
  with_items:
    - name: "{{ deployment }}"
      size: "{{ etc_size }}"
    - name: "{{ deployment }}-world"
      size: "{{ world_size }}"
    - name: "{{ deployment }}-save"
      size: "{{ save_size }}"
    - name: "{{ deployment }}-mods-{{ version }}"
      size: "{{ mods_size }}"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
        labels:
          game: minecraft
          app: "{{ deployment }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ item.size }}"

- name: Create RCON Secret
  no_log: true
  register: rconSecret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ deployment }}-rcon-{{ version }}"
        namespace: "{{ namespace }}"
        labels:
          game: minecraft
          app: "{{ deployment }}"
      type: Opaque
      data:
        password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') | b64encode }}"

- name: Update API KEY Secret
  no_log: true
  register: apiKeySecret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "cf-api-key"
        namespace: "{{ namespace }}"
        labels:
          game: minecraft
      type: Opaque
      data:
        key: "{{ cf_api_key | b64encode }}"

- name: Create Environment ConfigMap
  register: envConfigMap_cm
  kubernetes.core.k8s:
    definition: "{{ envConfigMap | to_yaml }}"

- name: Create ops.json ConfigMap
  register: ops_json_cm
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ deployment }}-ops-{{ version }}"
        namespace: "{{ namespace }}"
        labels:
          game: minecraft
          app: "{{ deployment }}"
      data:
        ops.json: "{{ ops_json | to_json(indent=2,sort_keys=true) }}"

- name: Create Minecraft Policy
  kubernetes.core.k8s:
    definition:
      apiVersion: projectcalico.org/v3
      kind: GlobalNetworkPolicy
      metadata:
        name: "default-minecraft-allow"
        namespace: "{{ namespace }}"
        labels:
          game: minecraft
      spec:
        selector: "game == 'minecraft'"
        order: 1000
        types:
          - Ingress
          - Egress
        ingress:
          - action: Allow
            protocol: TCP
            destination:
              ports:
                - 25565
          - action: Allow
            protocol: TCP
            destination:
              ports:
                - 9150
            source:
              namespaceSelector: "app.kubernetes.io/name == 'prometheus'"
        egress:
          - action: Allow
            protocol: TCP
            destination:
              ports:
                - 53
                - 443
          - action: Allow
            protocol: UDP
            destination:
              ports:
                - 53
          - action: Allow
            protocol: TCP
            destination:
              ports:
                - 3128
              nets:
                - "{{ network.proxy | split(':') | first  }}/32"

- name: Create Deployment
  register: deployment
  kubernetes.core.k8s:
    apply: yes
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ deployment }}"
        namespace: "{{ namespace }}"
        labels:
          game: minecraft
          app: "{{ deployment }}"
          version: "{{ version }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ deployment }}"
            game: minecraft
            version: "{{ version }}"
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 0
            maxUnavailable: 1
        template:
          metadata:
            labels:
              app: "{{ deployment }}"
              version: "{{ version }}"
              game: minecraft
          spec:
            nodeSelector:
              kubernetes.io/role: gamer
            initContainers:
              - name: copy-ops
                image: "itzg/minecraft-server:{{ itzg_tag }}"
                command:
                  - /bin/bash
                  - -c
                args:
                  - cat /tmp/ops.json; cp -f /tmp/ops.json /data/ops.json;
                volumeMounts:
                  - name: "{{ deployment }}"
                    mountPath: /data
                  - name: "{{ deployment }}-ops"
                    mountPath: /tmp
              - name: check-update
                image: "itzg/minecraft-server:{{ itzg_tag }}"
                command:
                  - /bin/bash
                  - -c
                args:
                  - |
                    old_version_zip=$(find /data -maxdepth 1 -type f -name "*.zip" | grep -v {{ version }});
                    if [ -n "$old_version_zip" ]; then
                      echo "Removing old server pack zip";
                      rm -rf $old_version_zip;
                      echo "Moving old server start script";
                      mv -f /data/start.sh /data/start.sh.bak;
                    fi
                volumeMounts:
                  - name: "{{ deployment }}"
                    mountPath: /data
            containers:
              - name: "{{ deployment }}"
                image: "itzg/minecraft-server:{{ itzg_tag }}"
                imagePullPolicy: Always
                ports:
                  - containerPort: 25565
                volumeMounts:
                  - name: "{{ deployment }}"
                    mountPath: /data
                  - name: "{{ deployment }}-world"
                    mountPath: /data/world
                  - name: "{{ deployment }}-save"
                    mountPath: /data/save
                resources:
                  requests:
                    memory: "{{ envConfigMap.data.MAX_MEMORY }}"
                    cpu: "{{ (min_cpu | float * 1.5 ) | round(0, 'ceil') | int }}000m"
                  limits:
                    memory: "{{ ((envConfigMap.data.MAX_MEMORY | split('G') | first | float) * 1.5) | round(0, 'ceil') | int }}G"
                    cpu: "{{ (max_cpu | float * 1.5 ) | round(0, 'ceil') | int }}000m"
                envFrom:
                  - configMapRef:
                      name: "{{ deployment }}-env-{{ version }}"
                env:
                  - name: RCON_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ deployment }}-rcon-{{ version }}"
                        key: password
                  - name: CF_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: cf-api-key
                        key: key
                  - name: PROXY
                    value: "{{ network.proxy }}"
                dnsConfig:
                  nameservers:
                  - 1.1.1.1
                  - 1.0.0.1
                livenessProbe:
                  exec:
                    command:
                      - mc-health
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  failureThreshold: 3
                  successThreshold: 1
                  timeoutSeconds: 1
                readinessProbe:
                  exec:
                    command:
                      - mc-health
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  failureThreshold: 3
                  successThreshold: 1
                  timeoutSeconds: 1
                startupProbe:
                  exec:
                    command:
                      - mc-health
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  failureThreshold: 600
                  successThreshold: 1
                  timeoutSeconds: 1
              - name: minecraft-exporter
                image: "ghcr.io/dirien/minecraft-exporter:0.19.0"
                ports:
                  - containerPort: 9150
                resources:
                  requests:
                    memory: "16M"
                    cpu: "100m"
                  limits:
                    memory: "128M"
                    cpu: "500m"
                env:
                  - name: MC_WORLD
                    value: /data/world
                  - name: MC_MOD_SERVER_STATS
                    value: "{{ server_stats }}"
                  - name: MC_RCON_ADDRESS
                    value: ":25575"
                  - name: MC_RCON_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ deployment }}-rcon-{{ version }}"
                        key: password
                volumeMounts:
                  - name: "{{ deployment }}-world"
                    mountPath: /data/world
                    readOnly: true
                livenessProbe:
                  httpGet:
                    path: /
                    port: 9150
                  initialDelaySeconds: 30
                  timeoutSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 9150
                  initialDelaySeconds: 30
                  timeoutSeconds: 10
            volumes:
              - name: "{{ deployment }}"
                persistentVolumeClaim:
                  claimName: "{{ deployment }}"
              - name: "{{ deployment }}-mods"
                persistentVolumeClaim:
                  claimName: "{{ deployment }}-mods-{{ version }}"
              - name: "{{ deployment }}-world"
                persistentVolumeClaim:
                  claimName: "{{ deployment }}-world"
              - name: "{{ deployment }}-save"
                persistentVolumeClaim:
                  claimName: "{{ deployment }}-save"
              - name: "{{ deployment }}-ops"
                configMap:
                  name: "{{ deployment }}-ops-{{ version }}"

- name: Wait for Deployment to be Ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ namespace }}"
    name: "{{ deployment }}"
  register: deployment_info
  until: deployment_info.resources[0].status.readyReplicas == 1
  retries: 60
  delay: 10

- name: Create Server Service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ deployment }}"
        namespace: "{{ namespace }}"
        game: minecraft
        app: "{{ deployment }}"
        version: "{{ version }}"
        annotations:
          metallb.universe.tf/loadBalancerIPs: "{{ network.identifier }}.{{ network_address }}"
          metallb.universe.tf/allow-shared-ip: "minecraft"
      spec:
        selector:
          app: "{{ deployment }}"
          game: minecraft
          version: "{{ version }}"
        ports:
          - protocol: TCP
            port: "{{ svc_port}}"
            targetPort: 25565
        type: LoadBalancer
        externalTrafficPolicy: Local
        internalTrafficPolicy: Local

- name: Create Exporter Service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ deployment }}-exporter"
        namespace: "{{ namespace }}"
        game: minecraft
        app: "{{ deployment }}"
        version: "{{ version }}"
      spec:
        selector:
          app: "{{ deployment }}"
          game: minecraft
          version: "{{ version }}"
        ports:
          - protocol: TCP
            port: 80
            targetPort: 9150
        type: ClusterIP